use std::cmp::Ordering;

#[derive(Debug)]
pub struct BST<T> {
    root: Link<T>
}

type Link<T> = Option<Box<Node<T>>>;

#[derive(Debug)]
struct Node<T> {
    elem: T,
    left: Link<T>,
    right: Link<T>
}

impl<T> BST<T> where T:Ord {
    pub fn new() -> Self { BST{root: None} }

    pub fn insert(&mut self, elem: T) -> bool { self.root.insert(elem) }

    pub fn search(&self, elem: T) -> bool { self.root.search(elem) }
}

trait Set<T> {
    fn insert(&mut self, elem: T) -> bool;
    fn search(&self, elem: T) -> bool;
}

impl<T> Set<T> for Link<T> where T:Ord {
    fn insert(&mut self, elem: T) -> bool {
        match *self {
            None => {
                // place the element in this link
                *self = Some(Box::new(Node{elem: elem, left: None, right: None}));
                true
            }
            Some(ref mut node) => {
                match node.elem.cmp(&elem) {
                    Ordering::Equal => false,                    // return false if the is in this node
                    Ordering::Less => node.left.insert(elem),    // recurse to the left if the new value
                                                                 // is less than the node's value
                    Ordering::Greater => node.right.insert(elem) // recurse to the right if the new value
                                                                 // is greater than the node's value
                }
            }
        }
    }
    fn search(&self, elem: T) -> bool {
        match *self {
            None => false,
            Some(ref node) => 
                match node.elem.cmp(&elem) {
                    Ordering::Equal => true,
                    Ordering::Less => node.left.search(elem),
                    Ordering::Greater => node.right.search(elem)
                }
        }
    }
}

struct IntoIter<T>(Link<T>);

impl<T> Iterator for IntoIter<T> {
    type Item = T;

    fn next(&mut self) -> Option<Self::Item> {
        match self.0 {
            None => None,
            Some(ref mut boxed_node) => {
                let node = **boxed_node;
                self.0 = node.right;
                Some(node.elem)
            }
        }
        // self.0.map(
        //     |boxed_node| {
        //         let node = *boxed_node;
        //         self.0 = node.right;
        //         node.elem
        //     }
        // )
    }
}



#[cfg(test)]
mod test {
    use super::BST;

    #[test]
    fn test_insert_search() {
        let mut bin_tree = BST::new();

        assert_eq!(bin_tree.search(5), false);

        assert_eq!(bin_tree.insert(5), true);
        assert_eq!(bin_tree.insert(6), true);
        assert_eq!(bin_tree.insert(2), true);
        assert_eq!(bin_tree.insert(3), true);

        assert_eq!(bin_tree.insert(3), false);

        assert_eq!(bin_tree.search(6), true);
        assert_eq!(bin_tree.search(7), false);
        assert_eq!(bin_tree.search(3), true);
    }
}
